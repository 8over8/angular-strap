{"version":3,"sources":["angular-strap.js","tooltip/tooltip.js","helpers/compiler.js","modal/modal.js","typeahead/typeahead.js","select/select.js","timepicker/timepicker.js","tab/tab.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","aside/aside.js","collapse/collapse.js","button/button.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","backdropAnimation","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","bsCompilerService","$inject","target","provider","placement","titleTemplate","trigger","keyboard","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","isTouch","TooltipFactory","$tooltip","$scope","$rootScope","$new","split","enterAnimateCallback","$emit","prefixEvent","leaveAnimateCallback","_tipToHide","evt","preventDefault","destroyTipElement","triggers","nodeName","on","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","hide","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$bsCompiler","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","parent","after","lastChild","display","visibility","clonedElement","addClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","leave","_blur","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","stopPropagation","directive","$root","$digest","restrict","query","querySelectorAll","tooltip","transclusion","falseValueRegExp","isDefined","dataTarget","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$window","$matches","activate","$activeIndex","select","index","$select","matches","$isVisible","update","$render","equals","$onMouseDown","keyCode","$onKeyDown","TypeaheadFactory","array","isFunction","$filter","expression","results","postLink","require","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$setViewValue","$viewValue","substring","displayValue","slice","$formatters","push","modelValue","selected","val","label","toString","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","isNative","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$isActive","$selectNone","$updateActiveIndex","splice","a","indexOf","b","$apply","isArray","targetEl","isUndefined","$selectScrollFix","$isIE","stopImmediatePropagation","ua","_show","activeElement","tagName","e","_hide","dataMultiple","inputEl","addEventListener","join","$getIndex","$isEmpty","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","spies","debounce","$document","windowEl","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","minor","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","customClass","bindBackdropEvents","defaultPrevented","which","lg","sm","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","AsideFactory","$aside","bsAside","aside","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","bind","toggleClass","$eval","v","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}